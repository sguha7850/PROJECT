vncserver -xstartup /bin/xterm -localhost no
xfce4-session
---------------------------------------------------------------
#Create Virtual env in linux before starting:
https://docs.python.org/3/library/venv.html

python3 -m venv sourav_venv
source sourav_venv/bin/activate

--------------------------------------------------------------

#Activate existing Venv: Using the command source venv/bin/activate while in that directory, will activate that virtual environment

cd Documents/Virtual_Env_Python/.venv
source bin/activate

https://discuss.python.org/t/from-what-directory-can-you-activate-a-virtual-environment/24698/3
-----------------------------------------------------------------
Preparing POTCAR files:
Copy the respective POTCAR  files to your working directory
cat Mo_POTCAR Te_POTCAR  > POTCAR

--------------------------------------------------------------------------------

#Code to display 2 columns in matplotlib from dat file

import numpy as np  
from matplotlib import pyplot as plt  
data=np.loadtxt('filep.dat')  
pl.plot(data[:,1],data[:,2],'bo')  
X=data[:,1]  
Y=data[:,2]  
plt.plot(X,Y,':ro')  
plt.show()
--------------------------------------------------------------------------------
Plot relaxation energy (TOTEN) vs no of steps (from OUTCAR)

import matplotlib.pyplot as plt
with open('OUTCAR', 'r') as file:
    lines = file.readlines()

values = []
for line in lines:
    if 'TOTEN' in line:
        value = line.split('=')[1].strip()
        values.append(value)

import numpy as np
new_values = [float(v.replace(' eV', '')) for v in values]

import matplotlib.pyplot as plt
x = np.arange(1, len(new_values)+1)
plt.plot(x, new_values)

plt.xlabel('Index')
plt.ylabel('Value')
plt.title('Plot of Values')
plt.show()

---------------------------------------------------------------------------------------------

Generate DOS: https://gist.github.com/lan496/ee0bd7a52df99029ac0aacbe69f2bf57

import matplotlib.pyplot as plt
from pymatgen.electronic_structure.core import OrbitalType
from pymatgen.electronic_structure.plotter import DosPlotter
from pymatgen.io.vasp.outputs import Vasprun
result = Vasprun('./vasprun.xml', parse_potcar_file=False)
complete_dos = result.complete_dos
plotter = DosPlotter()
plotter.add_dos('Total DOS', result.tdos)
plotter.get_plot(xlim=(-6, 5), ylim=(0, 14))
plt.savefig('MoS2_dos.pdf', dpi=500)

--------------------------------------------------------------------------------------


#Generate band diagram plot using pymatgen and vasprun.xml
https://enccs.github.io/vasp-best-practices/fcc_Si_bandstructure/

from pymatgen.io.vasp.outputs import Vasprun
from pymatgen.electronic_structure.plotter import BSPlotter
vaspout = Vasprun("./vasprun.xml")
bandstr = vaspout.get_band_structure(line_mode=True)
plt = BSPlotter(bandstr).get_plot(ylim=[-12,10])
plt.figure.savefig("band.pdf")
plt.figure.show()
---------------------------------------------------------------------------------------
#plot Si band structure using high-symmtery k path (using pymatgen)

https://ma.issp.u-tokyo.ac.jp/en/app-post/1146#:~:text=Band%20structure%20calculations%20using%20VASP,Plot%20the%20band%20structure.

#code: run this code after running vasp for the first time using the 4 files. This code will create a new KPOINTS file which we need to use for the 2nd run of vasp

from pymatgen.io.vasp.inputs import Kpoints
from pymatgen.core import Structure
from pymatgen.symmetry.bandstructure import HighSymmKpath

struct = Structure.from_file("POSCAR")
kpath = HighSymmKpath(struct)
kpts = Kpoints.automatic_linemode(divisions=40,ibz=kpath)
kpts.write_file("KPOINTS_nsc")

--------------------------------------------------------------------------------------------------------
#bandgap calculation:

from pymatgen.io.vasp import Vasprun
from pymatgen.electronic_structure.bandstructure import BandStructure
vasprun = Vasprun("./vasprun.xml")
band_structure = vasprun.get_band_structure()
band_gap = band_structure.get_band_gap()

# Print the bandgap information
print(f"Bandgap: {band_gap['energy']} eV")
print(f"Is the bandgap direct? {band_gap['direct']}")
print(f"Transition: {band_gap['transition']}")

-------------------------------------------------------------------------------------------------------
#Effective mass calculation

sumo-bandstats

--------------------------------------------------------------------------------------------------------
VASP-Direct-to-Cartesian-Coordinate-Transform

Created on Tues Mar 28 13:56:18 2023
@author: ashutosh
"""

from pymatgen.core import Structure
structure = Structure.from_file("POSCAR")

f1 = open('POSCAR','r')
f2 = open('POSCAR_cart','w')

i=0
while True:
    line = f1.readline()
    i+=1
    if i < 8:
        f2.write(line)    
    if i == 8:
        f2.writelines('Cartesian \n')
    if i > 8:
        break    
f1.close()

for i in range(structure.num_sites):
    f2.writelines("{:14f} {:14f} {:14f}\n".format(structure.cart_coords[i][0],structure.cart_coords[i][1],structure.cart_coords[i][2]))  
f2.close()
